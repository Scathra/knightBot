import discord
import random
from discord.ext import commands
import math
import time
import pymongo
from pymongo import MongoClient
client = commands.Bot(command_prefix='.')
client.remove_command('help')

###Boot sequence and playing indicator###
@client.event
async def on_ready():
    print("The bot is ready!")


###call and response section###
@client.event
async def on_message(message):
    # ensures that bot isn't caught in a loop
    if message.author == client.user:
        return
    # It's a Trap!
    if message.content == "I need a hug":
        await message.channel.send("Initiating virtual hug, standby")
        time.sleep(2)
        await message.channel.send("https://tenor.com/view/milk-and-mocha-hug-cute-kawaii-love-gif-12535134")
    # Affirmative, but not in a way that spams chat
    if message.content == "You got it!":
        await message.channel.send("https://tenor.com/view/thumbs-up-good-great-excellent-like-gif-4987000")
    # Russian Roulette game
    if message.content == "Russian Roulette":
        for x in range(1):
            chamber = random.randint(1, 6)
            if chamber == 1:
                await message.channel.send("Bang! You done died mate!")
            else:
                await message.channel.send("Click, You live, for now...")
    # Alows commands to run
    await client.process_commands(message)


###Pick a Number Section(also allows for games to be played with only odd, even, or (hard maybe) prime numbers)
@client.command(pass_context=True)
async def PAN(ctx,Min=1,Max=100,Mod="whole"):
    member = ctx.author
    if Mod == "odd" or Mod == "Odd":
        for x in range(1):
            number = 2 * (random.randint(Min, Max) // 2) + 1
            if number > Max:
                number = number - 2
    elif Mod == "even" or Mod == "Even":
        if Min % 2 != 0:
            Min = Min + 1
        if Max % 2 != 0:
            Max = Max + 1
        for x in range(1):
            number = 2 * (random.randint(Min / 2, Max / 2))
    else:
        number = random.randint(Min,Max)
    if Mod == "even" or Mod == "Even":
        grammar = 'n '
    elif Mod == 'odd' or Mod == "Odd":
        grammar = 'n '
    else:
        grammar = ' '
    await ctx.send("I'm thinking of a"+grammar+str(Mod)+" number "+str(Min)+" to "+str(Max)+". Care to guess?")
    correct = False
    best_guess = 1
    best_id = "N/A"
    if ctx.author == client.user:
        return
    while not correct:
        if ctx.author == client.user:
            continue
        responce = await client.wait_for('message')
        current_guess = responce.content
        current_id = responce.author.id
        Wario = responce.author
        if Wario == client.user:
            continue
        if current_guess == "End":
            if Wario == member:
                break
            else:
                await ctx.send(f"Only {member.mention} can end the game!")           
        else:
            try:
                current_guess = int(current_guess)
            except ValueError:
                if Wario == client.user:
                    continue
                else:
                    await ctx.send("Guess must be a whole number")
                
            else:
                current_guess = int(current_guess)
                if best_id == "N/A":
                    best_guess = current_guess
                    best_id = current_id
                else:
                    if abs(current_guess-number)<abs(best_guess-number):
                        best_guess = current_guess
                        best_id = current_id
                    else:
                        continue
    await ctx.send(f"The game is over and <@{best_id}> has won! The number was {number} which means that the winner was off by {abs(best_guess-number)}")
        
### THE FLEX!!!! (honestly don't know what to do with it,  I guess some type of knightCoin thing.)###
#Open account if you don't have one, also creates the text file called bank.txt
@client.command(pass_context=True)
async def openaccount(ctx):
    person = ctx.author
    f = open('bank.txt', 'r+')
    text = f.read()
    f.close
    if str(person) in text:
        await ctx.send(f'{person.mention}, you already have an account silly!')
    else:
        f = open('bank.txt', 'a')
        f.write(f'{person}\n100\n')
        await ctx.send(f'Thank you for opening a knightCoin account {person.mention}! You have a starting balance of 100 knightCoins!')
#Check account if you have one, directs you to opening an account if you don't have one.
@client.command(pass_context=True)
async def bal(ctx):
    user = ctx.author
    f = open('bank.txt', 'r+')
    text = f.read()
    f.close
    if str(user) in text:
        lookup = user

        with open('bank.txt', 'r') as f:
            for num, line in enumerate(f, 1):
                if str(lookup) in line:
                    ln = num
        with open('bank.txt') as file:
            for i, line in enumerate(file):
                if i == ln:
                    await ctx.send(f'{user.mention}, you have {line.rstrip()} knightCoins in your account.')       
    
    else:
        await ctx.send(f'You do not have a knightCoin account {user.mention}, open an account by using the .openaccount command!')
@client.command(pass_context=True)
async def slots(ctx, bet):
    person = ctx.author
    if bet == '':
        await ctx.send(f'{person.mention}, You need to input a bet!')
    else:
        try:
            bet = int(bet)
        except ValueError:
            await ctx.send(f'You have to bet a whole number {person.mention}!')
        else:
            bet = int(bet)
        f = open('bank.txt', 'r+')
        text = f.read()
        f.close
        if str(person) in text:
            lookup = person

            with open('bank.txt', 'r') as f:
                for num, line in enumerate(f, 1):
                    if str(lookup) in line:
                        ln = num
                
            with open('bank.txt') as file:
                for i, line in enumerate(file):
                    if i == ln:
                        bal = int(line.rstrip())
            if bet > bal:
                await ctx.send(f'You do not have enough knightCoins for this!')
            else:
                new_bal = bal-bet
            spin = random.randint(1,100)
            if spin <= 36:
                with open('bank.txt', 'r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':strawberry::banana::cherries:\nUnlucky! {person.mention}, you have lost {bet} knightCoins! Your new balance is {new_bal} knightCoins!')
            elif spin > 36 and spin <= 50:
                payout = bet
                new_bal = new_bal+payout
                with open('bank.txt','r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':banana::banana::strawberry:\nCongratulations! {person.mention}, you have won {bet} knightCoins! Your new balance is {new_bal} knightCoins!')
            elif spin > 50 and spin <= 63:
                payout = bet+10
                new_bal = new_bal+payout
                with open('bank.txt','r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':strawberry::strawberry::cherries:\nCongratulations! {person.mention}, you have won {payout} knightCoins! Your new balance is {new_bal} knightCoins!')
            elif spin > 63 and spin <= 75:
                payout = float(bet)*float(1.5)
                try:
                    payout = int(payout)
                except ValueError:
                    payout = payout+float(0.5)
                    payout = int(payout)
                else:
                    payout = int(payout)
                new_bal = new_bal+payout
                with open('bank.txt','r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':cherries::cherries::banana:\nCongratulations! {person.mention}, you have won {payout} knightCoins! Your new balance is {new_bal} knightCoins!')
            elif spin > 75 and spin <= 87:
                payout = bet*2
                new_bal = new_bal+payout
                with open('bank.txt','r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':banana::banana::banana:\nCongratulations! {person.mention}, you have won {payout} knightCoins! Your new balance is {new_bal} knightCoins!')
            elif spin > 87 and spin <= 99:
                payout = bet*3
                new_bal = new_bal+payout
                with open('bank.txt','r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':strawberry::strawberry::strawberry:\nCongratulation! {person.mention}, you have won {payout} knightCoins! Your new balance is {new_bal} knightCoins!')
            elif spin == 100:
                payout = bet*10
                new_bal = new_bal+payout
                with open('bank.txt','r') as file:
                    data = file.readlines()
                data[ln] = str(new_bal)+'\n'
                with open('bank.txt','w') as file:
                    file.writelines( data )
                await ctx.send(f':cherries::cherries::cherries:\nJackpot!!! {person.mention}, you have won {payout} knightCoins! Your new balance is {new_bal} knightCoins!')
            else:
                await ctx.send(f'If you see this message, my bot screwed up royaly. Sorry bout that\n-Scathra')
        else:
            await ctx.send(f'{person.mention}, you do not have a knightCoin account. Make one with the .openaccount command!')
@client.command(pass_context=True)
async def broke(ctx):
    person = ctx.author
    f = open('bank.txt', 'r+')
    text = f.read()
    f.close
    if str(person) in text:
        lookup = person

        with open('bank.txt', 'r') as f:
            for num, line in enumerate(f, 1):
                if str(lookup) in line:
                    ln = num
                
        with open('bank.txt') as file:
            for i, line in enumerate(file):
                if i == ln:
                    bal = int(line.rstrip())
        if bal > 0:
            await ctx.send(f'Hey, you are not broke! Do not try to steal from me!')
        else:
            new_bal = 100
            with open('bank.txt','r') as file:
                data = file.readlines()
            data[ln] = str(new_bal)+'\n'
            with open('bank.txt','w') as file:
                file.writelines( data )
            await ctx.send(f'Alright {person.mention}, I will give you 100 knightCoins, but only because I am nice.')
@client.command(pass_context=True)
async def steal(ctx,victim):
    theif = ctx.author
    f = open('bank.txt', 'r+')
    text = f.read()
    f.close
    if str(theif) in text:
        if victim not in text:
            await ctx.send(f'{victim} does not have an account.')
        else:
            lookup = theif
            lookup2 = victim
            with open('bank.txt', 'r') as f:
                for num, line in enumerate(f, 1):
                    if str(lookup) in line:
                        ln = num
            f.close
            with open('bank.txt', 'r') as f:
                for num, line in enumerate(f, 1):
                    if str(lookup2) in line:
                        ln2 = num
            f.close
            with open('bank.txt') as file:
                for i, line in enumerate(file):
                    if i == ln:
                        bal = int(line.rstrip())
            file.close
            with open('bank.txt') as file:
                for i, line in enumerate(file):
                    if i == ln2:
                        bal2 = int(line.rstrip())
            file.close
            if ln == ln2:
                await ctx.send(f"You can't steal from yourself!")
            else:
                decider = random.randint(1,10)
                if decider <= 4:
                    yoinked = float(bal2) - 100
                    if yoinked <= 0:
                        await ctx.send(f'You break into their account like the terrible person you are, only to find that {victim} is too poor to steal from')
                    else:
                        new_bal = bal + 100
                        new_bal2 = bal2 - 100
                        with open('bank.txt','r') as file:
                            data = file.readlines()
                            data[ln] = str(new_bal)+'\n'
                        with open('bank.txt','w') as file:
                            file.writelines( data )
                        file.close
                        with open('bank.txt','r') as file:
                            data = file.readlines()
                            data[ln2] = str(new_bal2)+'\n'
                        with open('bank.txt','w') as file:
                            file.writelines( data )
                        await ctx.send(f'Alright you terrible human, you stole 100 knightCoins from {victim}')
                else:
                    yoinked = float(bal)/2
                    try:
                        yoinked = int(yoinked)
                    except ValueError:
                        yoinked = yoinked + float(0.5)
                        yoinked = int(yoinked)
                    else:
                        yoinked = int(yoinked)
                    new_bal = bal - yoinked
                    new_bal2 = bal2 + yoinked
                    with open('bank.txt','r') as file:
                        data = file.readlines()
                        data[ln] = str(new_bal)+'\n'
                    with open('bank.txt','w') as file:
                        file.writelines( data )
                    file.close
                    with open('bank.txt','r') as file:
                        data = file.readlines()
                        data[ln2] = str(new_bal2)+'\n'
                    with open('bank.txt','w') as file:
                        file.writelines( data )
                    file.close
                    await ctx.send(f"{theif.mention} was caught breaking into {victim}'s account and was forced to pay {yoinked} in damages.")
                
    else:
        await ctx.send(f'You can not steal if you have nowhere to put the money! Open an account with the .openaccount command.')
@client.command(pass_context=True)
async def store(ctx):
    await ctx.send(f'What you thought you could buy stuff with a random currency made by some random programmer with absolutley no value? You make me laugh. Look, the thing you get with knightCoin is the satisfaction of some random number going up on a screen. That is it. Nothing more. The ways to get money are easy and therefore no prize you could buy with them would truly be worth it. So just make the number high, and have some fun with it.')
@client.command(pass_context=True)
async def give(ctx, ammount, person):
    user = ctx.author
    f = open('bank.txt','r+')
    text = f.read()
    f.close
    if str(user) in text:
        if person == '':
            await ctx.send(f'{user.mention}, you can not give your knightCoins to no one silly!')
        elif ammount == '' or ammount == '0':
            await ctx.send(f'{user.mention}, you can not give someone nothing silly!')
        elif person == user:
            await ctx.send(f"{user.mention}, w-why would you give money to yourself? That will do absolutley nothing.")
        else:
            try:
                ammount = int(ammount)
            except ValueError:
                await ctx.send(f"You can only give whole knightCoins.")
            else:
                ammount = int(ammount)
                lookup = user
                lookup2 = person
                with open('bank.txt', 'r') as f:
                    for num, line in enumerate(f, 1):
                        if str(lookup) in line:
                            ln = num
                f.close
                with open('bank.txt', 'r') as f:
                    for num, line in enumerate(f, 1):
                        if str(lookup2) in line:
                            ln2 = num
                f.close
                with open('bank.txt') as file:
                    for i, line in enumerate(file):
                        if i == ln:
                            bal = int(line.rstrip())
                file.close
                with open('bank.txt') as file:
                    for i, line in enumerate(file):
                        if i == ln2:
                            bal2 = int(line.rstrip())
                file.close
                new_bal = bal-ammount
                new_bal2 = bal2+ammount
                if new_bal < 0:
                    await ctx.send(f'You do not have enought knightCoins to do that!')
                else:
                    with open('bank.txt','r') as file:
                        data = file.readlines()
                        data[ln] = str(new_bal)+'\n'
                    with open('bank.txt','w') as file:
                        file.writelines( data )
                    file.close
                    with open('bank.txt','r') as file:
                        data = file.readlines()
                        data[ln2] = str(new_bal2)+'\n'
                    with open('bank.txt','w') as file:
                        file.writelines( data )
                    file.close
                    await ctx.send(f'Alright {user.mention}, you have given {ammount} knightCoins to {person}. How kind!')
    else:
        await ctx.send(f'{user.mention}, you do not have a knightCoin account. Open one with the .openaccount command!')
@client.command(pass_context=True)
async def top(ctx):
    integers = open('bank.txt','r+')
    first=0
    firstP=''
    second=0
    secondP=''
    third=0
    thirdP=''
    fourth=0
    fourthP=''
    fifth=0
    fifthP=''
    sixth=0
    sixthP=''
    seventh=0
    seventhP=''
    eigth=0
    eigthP=''
    ninth=0
    ninthP=''
    tenth=0
    tenthP=''
    for line in integers:
        try:
            int(line.rstrip())
        except ValueError:
            currentP = line.rstrip('# 1 2 3 4 5 6 7 8 9 0 \n')
        else:
            current = int(line.rstrip())
            if current > first:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = sixth
                seventhP = sixthP
                sixth = fifth
                sixthP = fifthP
                fifth = fourth
                fifthP = fourthP
                fourth = third
                fourthP = thirdP
                third = second
                thirdP = secondP
                second = first
                secondP = firstP
                first = current
                firstP = currentP
            elif current > second:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = sixth
                seventhP = sixthP
                sixth = fifth
                sixthP = fifthP
                fifth = fourth
                fifthP = fourthP
                fourth = third
                fourthP = thirdP
                third = second
                thirdP = secondP
                second = current
                secondP = currentP
            elif current > third:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = sixth
                seventhP = sixthP
                sixth = fifth
                sixthP = fifthP
                fifth = fourth
                fifthP = fourthP
                fourth = third
                fourthP = thirdP
                third = current
                thirdP = currentP
            elif current > fourth:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = sixth
                seventhP = sixthP
                sixth = fifth
                sixthP = fifthP
                fifth = fourth
                fifthP = fourthP
                fourth = current
                fourthP = currentP
            elif current > fifth:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = sixth
                seventhP = sixthP
                sixth = fifth
                sixthP = fifthP
                fifth = current
                fifthP = currentP
            elif current > sixth:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = sixth
                seventhP = sixthP
                sixth = current
                sixthP = currentP
            elif current > seventh:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = seventh
                eigthP = seventhP
                seventh = current
                seventhP = currentP
            elif current > eigth:
                tenth = ninth
                tenthP = ninthP
                ninth = eigth
                ninthP = eigthP
                eigth = current
                eigthP = currentP
            elif current > ninth:
                tenth = ninth
                tenthP = ninthP
                ninth = current
                ninthP = currentP
            elif current > tenth:
                tenth = current
                tenthP = currentP
    await ctx.send(f''' ```
People with most knightCoins:
1. {firstP} {first}
2. {secondP} {second}
3. {thirdP} {third}
4. {fourthP} {fourth}
5. {fifthP} {fifth}
6. {sixthP} {sixth}
7. {seventhP} {seventh}
8. {eigthP} {eigth}
9. {ninthP} {ninth}
10. {tenthP} {tenth}
```''')


###Bot Stuff###
@client.command(pass_context=True)
async def help(ctx, cmd='none'):
    if cmd == 'help':
        await ctx.send(f'''```
Asks for help with commands. format: .help [command(leave empty for list)]
```''')
    elif cmd == 'PAN':
        await ctx.send(f'''```
.PAN [Min num (defaults to 1)] [Max num (defaults to 100)] [even or odd (defaults to whole numbers)]
```''')
    elif cmd == 'ping':
        await ctx.send(f'''```
.ping
```''')
    elif cmd == 'openaccount':
        await ctx.send(f'''```
.openaccount
```''')
    elif cmd == 'bal':
        await ctx.send(f'''```
.bal
```''')
    elif cmd == 'slots':
        await ctx.send(f'''```
.slots [bet(whole knightCoins only)]
```''')
    elif cmd == 'steal':
        await ctx.send(f'''```
.steal [person (do not ping first word of username only)]
```''')
    elif cmd == 'top':
        await ctx.send(f'''```
.top
```''')
    elif cmd == 'broke':
        await ctx.send(f'''```
.broke
```''')
    elif cmd == 'give':
        await ctx.send(f'''```
.give [ammount (whole knightCoins only)] [person (no pinging, first name of person's username)]
```''')
    else:
        await ctx.send(f'''```
List of commands:
.PAN (Pick A Number game)
.ping (shows latency)
.help (this command)
.openaccount (opens knightCoin account)
.bal (checks balance)
.slots (plays slots)
.steal (steals from other people)
.top (shows top coins)
.broke (use if you have no knightCoins)
.give (give money to someone else)
There are also 3 messages that do not require the '.' prefix: I need a hug, You got it!, and Russian Roulette
A note: If a command involves another user, DO NOT PING THEM! My bot won't work with it and it's just rude. Instead, simply use the first word of their username (not nickname)
to get the format of commands, use .help [command]
```''')

@client.command(pass_context=True)
async def ping(ctx):
    await ctx.send(f'Pong! {round(client.latency * 1000)}ms')

    


client.run("TOKEN")

